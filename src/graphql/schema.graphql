interface ILayout {
  extend: String
}
interface IAction {
  type: String!
}

enum SectionComponentType
enum ScreenProperties

union Section
union Screen

type SectionContainer {
  id: String!

  # The key that determines how to render the section data model
  sectionComponentType: SectionComponentType

  # The data for this specific section
  section: Section

  # ... Metadata, logging data & more
}

type ScreenContainer {
  id: String!
  screenProperties: ScreenProperties
  screen: Screen
}

type SectionDetail {
  # References a SectionContainer in the GPResponse.sections array
  sectionId: String!

  # Styling data
  # topPadding: Int
  # bottomPadding: Int

  # ... Other styling data (margins, borders, etc)
}

# A placement meat to display a single GP section
type SingleSectionPlacement {
  sectionDetail: SectionDetail!
}

# A placement meat to display multiple GP sections in the order they appear in the sectionDetails array
type MultipleSectionsPlacement {
  sectionDetails: [SectionDetail]!
}

interface GPResponse {
  page: ID! # page name 
  pattern: String! # page url ex. '/user/:id'
  sections: [SectionContainer]

  screens: [ScreenContainer]

  # ... Other metadata, logging data or feature-specific logic
}
